
import { toPng } from 'html-to-image';
import { toast } from '@/components/ui/use-toast';
import { PieChartData } from './chartDataUtils';

export const downloadChartAsImage = (chartRef: React.RefObject<HTMLDivElement>, data: PieChartData[]) => {
  if (!chartRef.current) {
    toast({
      title: "Error",
      description: "Could not find chart to download",
      variant: "destructive"
    });
    return;
  }

  // Create a container for the image
  const downloadContainer = document.createElement('div');
  downloadContainer.style.width = '800px';
  downloadContainer.style.height = '600px';
  downloadContainer.style.padding = '20px';
  downloadContainer.style.backgroundColor = '#1a1a1a';
  downloadContainer.style.color = 'white';
  downloadContainer.style.fontFamily = 'sans-serif';
  
  // Add title
  const title = document.createElement('h2');
  title.textContent = 'My Startup Reality Check';
  title.style.textAlign = 'center';
  title.style.margin = '10px 0 20px';
  title.style.fontSize = '24px';
  title.style.color = 'white';
  downloadContainer.appendChild(title);
  
  // Clone the chart for proper rendering
  const chartElement = chartRef.current;
  const chartWrapper = document.createElement('div');
  chartWrapper.style.width = '100%';
  chartWrapper.style.height = '350px';
  
  // Set the inner HTML of the wrapper to the chart's HTML content
  chartWrapper.innerHTML = chartElement.innerHTML;
  
  // Append the chart wrapper to the download container
  downloadContainer.appendChild(chartWrapper);
  
  // Create legend
  const legend = document.createElement('div');
  legend.style.padding = '20px';
  legend.style.marginTop = '20px';
  legend.style.border = '1px solid rgba(255,255,255,0.1)';
  legend.style.borderRadius = '8px';
  
  data.forEach(item => {
    const itemDiv = document.createElement('div');
    itemDiv.style.marginBottom = '10px';
    itemDiv.style.display = 'flex';
    itemDiv.style.alignItems = 'flex-start';
    
    const colorBox = document.createElement('div');
    colorBox.style.width = '15px';
    colorBox.style.height = '15px';
    colorBox.style.backgroundColor = item.color;
    colorBox.style.marginRight = '10px';
    colorBox.style.marginTop = '3px';
    
    const textDiv = document.createElement('div');
    
    const itemTitle = document.createElement('div');
    itemTitle.textContent = `${item.name}: ${item.value}%`;
    itemTitle.style.fontWeight = 'bold';
    itemTitle.style.color = 'white';
    
    const itemDesc = document.createElement('div');
    itemDesc.textContent = item.description;
    itemDesc.style.fontSize = '14px';
    itemDesc.style.opacity = '0.8';
    itemDesc.style.color = 'rgba(255,255,255,0.8)';
    
    textDiv.appendChild(itemTitle);
    textDiv.appendChild(itemDesc);
    
    itemDiv.appendChild(colorBox);
    itemDiv.appendChild(textDiv);
    legend.appendChild(itemDiv);
  });
  
  downloadContainer.appendChild(legend);
  
  // Add footer
  const footer = document.createElement('div');
  footer.style.marginTop = '20px';
  footer.style.textAlign = 'center';
  footer.style.fontSize = '14px';
  footer.style.opacity = '0.7';
  footer.style.color = 'rgba(255,255,255,0.7)';
  footer.textContent = 'Generated by Roast â€¢ Share your startup reality check!';
  downloadContainer.appendChild(footer);
  
  // Add container to document temporarily
  document.body.appendChild(downloadContainer);
  downloadContainer.style.position = 'absolute';
  downloadContainer.style.left = '-9999px';
  
  // Convert to image and download
  return toPng(downloadContainer)
    .then((dataUrl) => {
      const link = document.createElement('a');
      link.download = 'startup-reality-check.png';
      link.href = dataUrl;
      link.click();
      
      // Clean up
      document.body.removeChild(downloadContainer);
      
      toast({
        title: "Chart downloaded successfully!",
        description: "Share it on your social media to let investors know you're self-aware."
      });
    })
    .catch((error) => {
      console.error('Error downloading chart:', error);
      // Clean up even on error
      if (document.body.contains(downloadContainer)) {
        document.body.removeChild(downloadContainer);
      }
      toast({
        title: "Download failed",
        description: "Please try again later.",
        variant: "destructive",
      });
    });
};
